pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Test') {
        steps {
            sh 'rm -rf api/.env'
            sh 'touch api/.env'
            withCredentials([
                file(credentialsId: 'GRAPH_PRIVATE_KEY', variable: 'jwt_privkey'),
                file(credentialsId: 'GRAPH_PUBLIC_KEY', variable: 'jwt_pubkey')
            ]) {
                writeFile file: 'api/config/jwt/private.pem', text: readFile(jwt_privkey)
                writeFile file: 'api/config/jwt/public.pem', text: readFile(jwt_pubkey)
            }
            sh 'make compose-up-ci'
            sh 'make compose-composer-dev'
            sh 'make compose-phpunit'
        }
    }
    stage('Build') {
        environment {
            LOSHITSA_TOKEN         = credentials('loshitsa_BOT_TOKEN')
            VITEBSK_TOKEN          = credentials('vitebsk_BOT_TOKEN')
            BNTU_TOKEN             = credentials('bntu_BOT_TOKEN')
            LOCALITY_GROUP_ID      = credentials('LOCALITY_GROUP_ID')
            VITE_BOT_NAME          = credentials('LIFE_BOT_NAME')
            VITE_TELEGRAM_AUTH_URL = '/api/login'
            VITE_TELEGRAM_API_URL  = '/api'
            VITE_GRAPH_URL         = 'https://graph.zubr.life/v1/graphql'
            VITE_SENTRY_DSN        = credentials('SENTRY_DSN')
            S3_SECRET              = credentials('API_S3_SECRET')
            S3_KEY                 = credentials('API_S3_KEY')
            PUBLIC_KEY             = credentials('LIFE_PUBLIC_KEY_USERS')
            JWT_ALGO               = credentials('JWT_ALGO')
            ACCESS_TOKEN           = credentials('BACKEND_ACCESS_TOKEN')
            GRAPHQL_URL            = credentials('GRAPHQL_URL')
        }
        steps {
            sh 'rm -rf api/vendor'
            sh 'make compose-composer-ci'
            sh 'make compose-down-ci'
            dir("frontend") {
                sh 'yarn'
                sh 'yarn build-bntu'
                sh 'yarn build-loshitsa'
                sh 'yarn build-vitebsk'
                sh 'rm -rf node_modules'
            }
            dir('api'){
                writeFile file: '.env', text: """
loshitsa_BOT_TOKEN=${LOSHITSA_TOKEN}
vitebsk_BOT_TOKEN=${VITEBSK_TOKEN}
bntu_BOT_TOKEN=${BNTU_TOKEN}
GROUPS='${LOCALITY_GROUP_ID}'
DOMAIN=loshitsa.zubr.life
APP_ENV=prod
CORS_ALLOW_ORIGIN=*
S3_BUCKET=lifeloshitsa
AWS_SECRET=${S3_SECRET}
AWS_KEY=${S3_KEY}
PUBLIC_KEY=%kernel.project_dir%/config/credentials/public.key
JWT_ALGO=${JWT_ALGO}
PRIVATE_KEY=%kernel.project_dir%/config/jwt/private.pem
PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
ACCESS_TOKEN=${ACCESS_TOKEN}
GRAPHQL_URL=${GRAPHQL_URL}
"""
            }
        }
    }
    stage('Deploy') {
        environment{
            DIGITALOCEAN_ACCESS_TOKEN = credentials('DIGITALOCEAN_ACCESS_TOKEN')
            def HOSTS = sh(
                script: "doctl compute droplet list --format PublicIPv4 --no-header --tag-name zubr_life| tr '\n' ','",
                returnStdout: true
            ).trim()
        }
        steps {
            ansiblePlaybook(
                  playbook: 'infrastructure/deploy.yml',
                  inventory: "$HOSTS",
                  credentialsId: "CURRENT_DEPLOY_KEY",
                  hostKeyChecking: false
            )
        }
    }
  }
  post {
    always {
      notifyBuild(currentBuild.result)
    }
  }
}

def notifyBuild(def buildStatus) {
    buildStatus =  buildStatus ?: 'SUCCESS'
    GIT_COMMIT_MSG = sh (
        script: "git log --format=format:%s -1 ${GIT_COMMIT}",
        returnStdout: true
    ).trim()
    def emojiMap = [ 'STARTED': '#F0FFFF', 'SUCCESS': 'âœ…', 'FAILURE': 'ðŸ›‘' ]
    telegramSend """
${emojiMap[buildStatus]} *${JOB_NAME}* - ${buildStatus}
${env.RUN_DISPLAY_URL}
${GIT_COMMIT_MSG}
    """
}


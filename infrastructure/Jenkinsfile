pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {

    stage('Test') {
        steps {
            sh 'rm -rf api/.env'
            sh 'touch api/.env'
            withCredentials([file(credentialsId: 'LIFE_PRIVATE_KEY', variable: 'privkey'),
                             file(credentialsId: 'LIFE_PUBLIC_KEY', variable: 'pubkey')]) {
                writeFile file: 'api/config/jwt/private.pem', text: readFile(privkey)
                writeFile file: 'api/config/jwt/public.pem', text: readFile(pubkey)
            }
            sh 'make compose-up-ci'
            sh 'make compose-composer-dev'
            sh 'make compose-phpunit'
        }
    }
    stage('Build') {
        environment {
            LOCALITY_BOT_TOKEN     = credentials('LOCALITY_BOT_TOKEN')
            LOCALITY_GROUP_ID      = credentials('LOCALITY_GROUP_ID')
            DATABASE_URL           = credentials('LIFE_DATABASE_URL')
            VITE_BOT_NAME          = credentials('LIFE_BOT_NAME')
            VITE_TELEGRAM_AUTH_URL = 'https://api.zubr.life/login'
            VITE_TELEGRAM_API_URL  = 'https://api.zubr.life'
            VITE_SENTRY_DSN        = credentials('SENTRY_DSN')
            S3_SECRET              = credentials('API_S3_SECRET')
            S3_KEY                 = credentials('API_S3_KEY')
            PUBLIC_KEY             = credentials('LIFE_PUBLIC_KEY_USERS')
        }
        steps {
            sh 'yarn'
            sh 'yarn build'
            sh 'rm -rf api/vendor'
            sh 'make compose-composer-ci'
            dir('api'){
                writeFile file: '.env', text: """
LOCALITY_BOT_TOKEN=${LOCALITY_BOT_TOKEN}
GROUPS="${LOCALITY_GROUP_ID}"
DATABASE_URL="${DATABASE_URL}"
DOMAIN=new.zubr.life
APP_ENV=prod
JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
CORS_ALLOW_ORIGIN='^https?://(new.zubr.life)'
S3_BUCKET=lifeloshica
AWS_SECRET=${S3_SECRET}
AWS_KEY=${S3_KEY}
PUBLIC_KEY=${PUBLIC_KEY}
"""
            }
        }
    }
    stage('Deploy') {
        environment {
            FRONTEND_HOST  = credentials('FRONTEND_HOST')
        }
        steps {
            ansiblePlaybook(
                  playbook: 'infrastructure/deploy.yml',
                  inventory: "$FRONTEND_HOST,",
                  credentialsId: "SSH_PRIVATE_KEY",
                  hostKeyChecking: false
            )
        }
    }
  }
  post {
    always {
      sh 'make compose-down-ci'
      notifyBuild(currentBuild.result)
    }
  }
}

def notifyBuild(def buildStatus) {
    buildStatus =  buildStatus ?: 'SUCCESS'
    GIT_COMMIT_MSG = sh (
        script: "git log --format=format:%s -1 ${GIT_COMMIT}",
        returnStdout: true
    ).trim()
    def emojiMap = [ 'STARTED': '#F0FFFF', 'SUCCESS': 'âœ…', 'FAILURE': 'ðŸ›‘' ]
    telegramSend """
${emojiMap[buildStatus]} *${JOB_NAME}* - ${buildStatus}
${env.RUN_DISPLAY_URL}
${GIT_COMMIT_MSG}
    """
}

